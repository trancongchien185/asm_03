{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { deleteCart, updateCart } from \"../Redux/Action/ActionCart\";\n// import ListCart from \"./Component/ListCart\";\n// import alertify from \"alertifyjs\";\n// import { Link, Redirect } from \"react-router-dom\";\n// import CartAPI from \"../API/CartAPI\";\n// import queryString from \"query-string\";\n// import convertMoney from \"../convertMoney\";\n// // import Loading from \"../Loading/Loading\";\n// function Cart(props) {\n//   //listCart được lấy từ redux\n//   const listCart = useSelector((state) => state.Cart.listCart);\n\n//   const [cart, setCart] = useState([]);\n\n//   const [total, setTotal] = useState();\n\n//   let user = JSON.parse(localStorage.getItem(\"user\"));\n\n//   const dispatch = useDispatch();\n\n//   //State dùng để Load dữ liệu từ Redux\n//   const [loadRedux, setLoadRedux] = useState({\n//     idProduct: \"\",\n//     count: \"\",\n//   });\n\n//   //State dùng để Load dữ liệu từ API\n//   const [loadAPI, setLoadAPI] = useState(false);\n\n//   //Hàm này dùng để Load dữ liệu ở Redux\n//   //Khi người dùng chưa đăng nhập\n//   useEffect(() => {\n//     const fetchDataRedux = () => {\n//       if (!localStorage.getItem(\"user\")) {\n//         setCart(listCart);\n\n//         getTotal(listCart);\n//       }\n//     };\n\n//     fetchDataRedux();\n//   }, [loadRedux]);\n\n//   //Hàm này dùng để tính tổng tiền carts\n//   function getTotal(carts) {\n//     let sub_total = 0;\n\n//     const sum_total = carts.map((value) => {\n//       return (sub_total +=\n//         parseInt(value.priceProduct) * parseInt(value.count));\n//     });\n\n//     setTotal(sub_total);\n//   }\n\n//   //Hàm này dùng để load dữ liệu từ API\n//   //Khi người dùng đã đăng nhập\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       if (localStorage.getItem(\"id_user\")) {\n//         const params = {\n//           idUser: localStorage.getItem(\"id_user\"),\n//         };\n\n//         const query = \"?\" + queryString.stringify(params);\n\n//         console.log(query);\n\n//         const response = await CartAPI.getCarts(query);\n\n//         setCart(response);\n\n//         getTotal(response);\n//       }\n//     };\n\n//     fetchData();\n\n//     setLoadAPI(false);\n//   }, [loadAPI]);\n\n//   //Hàm này dùng để truyền xuống cho component con xử và trả ngược dữ liệu lại component cha\n//   const onDeleteCart = (getUser, getProduct) => {\n//     console.log(\"idUser: \" + getUser + \", idProduct: \" + getProduct);\n\n//     if (localStorage.getItem(\"id_user\")) {\n//       // user đã đăng nhập\n\n//       //Sau khi nhận được dữ liệu ở component con truyền lên thì sẽ gọi API xử lý dữ liệu\n//       const fetchDelete = async () => {\n//         const params = {\n//           idUser: getUser,\n//           idProduct: getProduct,\n//         };\n\n//         const query = \"?\" + queryString.stringify(params);\n\n//         const response = await CartAPI.deleteToCart(query);\n//         console.log(response);\n//       };\n\n//       fetchDelete();\n\n//       //Sau đó thay đổi state loadAPI và load lại hàm useEffect\n//       setLoadAPI(true);\n\n//       alertify.set(\"notifier\", \"position\", \"bottom-left\");\n//       alertify.error(\"Bạn Đã Xóa Hàng Thành Công!\");\n//     } else {\n//       // user chưa đăng nhập\n\n//       //Nếu không có phiên làm việc của Session User thì mình sẽ xử lý với Redux\n//       const data = {\n//         idProduct: getProduct,\n//         idUser: getUser,\n//       };\n\n//       //Đưa dữ liệu vào Redux\n//       const action = deleteCart(data);\n//       dispatch(action);\n\n//       alertify.set(\"notifier\", \"position\", \"bottom-left\");\n//       alertify.error(\"Bạn Đã Xóa Hàng Thành Công!\");\n\n//       //set state loadRedux để nó load lại hàm useEffect để tiếp tục lấy dữ liệu từ redux\n//       setLoadRedux({\n//         idProduct: getProduct,\n//         count: \"\",\n//       });\n//     }\n//   };\n\n//   //Hàm này dùng để truyền xuống cho component con xử và trả ngược dữ liệu lại component cha\n//   const onUpdateCount = (getUser, getProduct, getCount) => {\n//     console.log(\n//       \"Count: \" +\n//         getCount +\n//         \", idUser: \" +\n//         getUser +\n//         \", idProduct: \" +\n//         getProduct\n//     );\n\n//     if (localStorage.getItem(\"id_user\")) {\n//       // user đã đăng nhập\n\n//       //Sau khi nhận được dữ liệu ở component con truyền lên thì sẽ gọi API xử lý dữ liệu\n//       const fetchPut = async () => {\n//         const params = {\n//           idUser: getUser,\n//           idProduct: getProduct,\n//           count: getCount,\n//         };\n\n//         const query = \"?\" + queryString.stringify(params);\n\n//         const response = await CartAPI.putToCart(query);\n//         console.log(response);\n//       };\n\n//       fetchPut();\n\n//       //Sau đó thay đổi state loadAPI và load lại hàm useEffect\n//       setLoadAPI(true);\n\n//       console.log(\"Ban Da Dang Nhap!\");\n\n//       alertify.set(\"notifier\", \"position\", \"bottom-left\");\n//       alertify.success(\"Bạn Đã Sửa Hàng Thành Công!\");\n//     } else {\n//       //Nếu không có phiên làm việc của Session User thì mình sẽ xử lý với Redux\n//       const data = {\n//         idProduct: getProduct,\n//         idUser: getUser,\n//         count: getCount,\n//       };\n\n//       //Đưa dữ liệu vào Redux\n//       const action = updateCart(data);\n//       dispatch(action);\n\n//       alertify.set(\"notifier\", \"position\", \"bottom-left\");\n//       alertify.success(\"Bạn Đã Sửa Hàng Thành Công!\");\n\n//       //set state loadRedux để nó load lại hàm useEffect để tiếp tục lấy dữ liệu từ redux\n//       setLoadRedux({\n//         idProduct: getProduct,\n//         count: getCount,\n//       });\n//     }\n//   };\n\n//   //Hàm này dùng để redirect đến page checkout\n//   const [redirect, setRedirect] = useState(false);\n\n//   const onCheckout = () => {\n//     if (!localStorage.getItem(\"id_user\")) {\n//       alertify.set(\"notifier\", \"position\", \"bottom-left\");\n//       alertify.error(\"Vui Lòng Kiểm Tra Lại Đăng Nhập!\");\n//       return;\n//     }\n\n//     if (cart.length === 0) {\n//       alertify.set(\"notifier\", \"position\", \"bottom-left\");\n//       alertify.error(\"Vui Lòng Kiểm Tra Lại Giỏ Hàng!\");\n//       return;\n//     }\n\n//     setRedirect(true);\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <section className=\"py-5 bg-light\">\n//         <div className=\"container\">\n//           <div className=\"row px-4 px-lg-5 py-lg-4 align-items-center\">\n//             <div className=\"col-lg-6\">\n//               <h1 className=\"h2 text-uppercase mb-0\">Cart</h1>\n//             </div>\n//             <div className=\"col-lg-6 text-lg-right\">\n//               <nav aria-label=\"breadcrumb\">\n//                 <ol className=\"breadcrumb justify-content-lg-end mb-0 px-0\">\n//                   <li className=\"breadcrumb-item active\" aria-current=\"page\">\n//                     Cart\n//                   </li>\n//                 </ol>\n//               </nav>\n//             </div>\n//           </div>\n//         </div>\n//       </section>\n//       <section className=\"py-5\">\n//         <h2 className=\"h5 text-uppercase mb-4\">Shopping cart</h2>\n//         <div className=\"row\">\n//           <div className=\"col-lg-8 mb-4 mb-lg-0\">\n//             <ListCart\n//               listCart={cart}\n//               onDeleteCart={onDeleteCart}\n//               onUpdateCount={onUpdateCount}\n//             />\n\n//             <div className=\"bg-light px-4 py-3\">\n//               <div className=\"row align-items-center text-center\">\n//                 <div className=\"col-md-6 mb-3 mb-md-0 text-md-left\">\n//                   <Link\n//                     className=\"btn btn-link p-0 text-dark btn-sm\"\n//                     to={`/shop`}\n//                   >\n//                     <i className=\"fas fa-long-arrow-alt-left mr-2\"> </i>\n//                     Continue shopping\n//                   </Link>\n//                 </div>\n//                 <div className=\"col-md-6 text-md-right\">\n//                   {redirect && <Redirect to={\"/checkout\"} />}\n//                   <span\n//                     className=\"btn btn-outline-dark btn-sm\"\n//                     onClick={onCheckout}\n//                   >\n//                     Proceed to checkout\n//                     <i className=\"fas fa-long-arrow-alt-right ml-2\"></i>\n//                   </span>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"col-lg-4\">\n//             <div className=\"card border-0 rounded-0 p-lg-4 bg-light\">\n//               <div className=\"card-body\">\n//                 <h5 className=\"text-uppercase mb-4\">Cart total</h5>\n//                 <ul className=\"list-unstyled mb-0\">\n//                   <li className=\"d-flex align-items-center justify-content-between\">\n//                     <strong className=\"text-uppercase small font-weight-bold\">\n//                       Subtotal\n//                     </strong>\n//                     <span className=\"text-muted small\">\n//                       {convertMoney(total)} VND\n//                     </span>\n//                   </li>\n//                   <li className=\"border-bottom my-2\"></li>\n//                   <li className=\"d-flex align-items-center justify-content-between mb-4\">\n//                     <strong className=\"text-uppercase small font-weight-bold\">\n//                       Total\n//                     </strong>\n//                     <span>{convertMoney(total)} VND</span>\n//                   </li>\n//                 </ul>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </section>\n//     </div>\n//   );\n// }\n\n// export default Cart;","map":{"version":3,"names":[],"sources":["D:/HappyCode/nodejsLab/asm 3/asm_3/client1/src/Cart/Cart.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { deleteCart, updateCart } from \"../Redux/Action/ActionCart\";\n// import ListCart from \"./Component/ListCart\";\n// import alertify from \"alertifyjs\";\n// import { Link, Redirect } from \"react-router-dom\";\n// import CartAPI from \"../API/CartAPI\";\n// import queryString from \"query-string\";\n// import convertMoney from \"../convertMoney\";\n// // import Loading from \"../Loading/Loading\";\n// function Cart(props) {\n//   //listCart được lấy từ redux\n//   const listCart = useSelector((state) => state.Cart.listCart);\n\n//   const [cart, setCart] = useState([]);\n\n//   const [total, setTotal] = useState();\n\n//   let user = JSON.parse(localStorage.getItem(\"user\"));\n\n//   const dispatch = useDispatch();\n\n//   //State dùng để Load dữ liệu từ Redux\n//   const [loadRedux, setLoadRedux] = useState({\n//     idProduct: \"\",\n//     count: \"\",\n//   });\n\n//   //State dùng để Load dữ liệu từ API\n//   const [loadAPI, setLoadAPI] = useState(false);\n\n//   //Hàm này dùng để Load dữ liệu ở Redux\n//   //Khi người dùng chưa đăng nhập\n//   useEffect(() => {\n//     const fetchDataRedux = () => {\n//       if (!localStorage.getItem(\"user\")) {\n//         setCart(listCart);\n\n//         getTotal(listCart);\n//       }\n//     };\n\n//     fetchDataRedux();\n//   }, [loadRedux]);\n\n//   //Hàm này dùng để tính tổng tiền carts\n//   function getTotal(carts) {\n//     let sub_total = 0;\n\n//     const sum_total = carts.map((value) => {\n//       return (sub_total +=\n//         parseInt(value.priceProduct) * parseInt(value.count));\n//     });\n\n//     setTotal(sub_total);\n//   }\n\n//   //Hàm này dùng để load dữ liệu từ API\n//   //Khi người dùng đã đăng nhập\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       if (localStorage.getItem(\"id_user\")) {\n//         const params = {\n//           idUser: localStorage.getItem(\"id_user\"),\n//         };\n\n//         const query = \"?\" + queryString.stringify(params);\n\n//         console.log(query);\n\n//         const response = await CartAPI.getCarts(query);\n\n//         setCart(response);\n\n//         getTotal(response);\n//       }\n//     };\n\n//     fetchData();\n\n//     setLoadAPI(false);\n//   }, [loadAPI]);\n\n//   //Hàm này dùng để truyền xuống cho component con xử và trả ngược dữ liệu lại component cha\n//   const onDeleteCart = (getUser, getProduct) => {\n//     console.log(\"idUser: \" + getUser + \", idProduct: \" + getProduct);\n\n//     if (localStorage.getItem(\"id_user\")) {\n//       // user đã đăng nhập\n\n//       //Sau khi nhận được dữ liệu ở component con truyền lên thì sẽ gọi API xử lý dữ liệu\n//       const fetchDelete = async () => {\n//         const params = {\n//           idUser: getUser,\n//           idProduct: getProduct,\n//         };\n\n//         const query = \"?\" + queryString.stringify(params);\n\n//         const response = await CartAPI.deleteToCart(query);\n//         console.log(response);\n//       };\n\n//       fetchDelete();\n\n//       //Sau đó thay đổi state loadAPI và load lại hàm useEffect\n//       setLoadAPI(true);\n\n//       alertify.set(\"notifier\", \"position\", \"bottom-left\");\n//       alertify.error(\"Bạn Đã Xóa Hàng Thành Công!\");\n//     } else {\n//       // user chưa đăng nhập\n\n//       //Nếu không có phiên làm việc của Session User thì mình sẽ xử lý với Redux\n//       const data = {\n//         idProduct: getProduct,\n//         idUser: getUser,\n//       };\n\n//       //Đưa dữ liệu vào Redux\n//       const action = deleteCart(data);\n//       dispatch(action);\n\n//       alertify.set(\"notifier\", \"position\", \"bottom-left\");\n//       alertify.error(\"Bạn Đã Xóa Hàng Thành Công!\");\n\n//       //set state loadRedux để nó load lại hàm useEffect để tiếp tục lấy dữ liệu từ redux\n//       setLoadRedux({\n//         idProduct: getProduct,\n//         count: \"\",\n//       });\n//     }\n//   };\n\n//   //Hàm này dùng để truyền xuống cho component con xử và trả ngược dữ liệu lại component cha\n//   const onUpdateCount = (getUser, getProduct, getCount) => {\n//     console.log(\n//       \"Count: \" +\n//         getCount +\n//         \", idUser: \" +\n//         getUser +\n//         \", idProduct: \" +\n//         getProduct\n//     );\n\n//     if (localStorage.getItem(\"id_user\")) {\n//       // user đã đăng nhập\n\n//       //Sau khi nhận được dữ liệu ở component con truyền lên thì sẽ gọi API xử lý dữ liệu\n//       const fetchPut = async () => {\n//         const params = {\n//           idUser: getUser,\n//           idProduct: getProduct,\n//           count: getCount,\n//         };\n\n//         const query = \"?\" + queryString.stringify(params);\n\n//         const response = await CartAPI.putToCart(query);\n//         console.log(response);\n//       };\n\n//       fetchPut();\n\n//       //Sau đó thay đổi state loadAPI và load lại hàm useEffect\n//       setLoadAPI(true);\n\n//       console.log(\"Ban Da Dang Nhap!\");\n\n//       alertify.set(\"notifier\", \"position\", \"bottom-left\");\n//       alertify.success(\"Bạn Đã Sửa Hàng Thành Công!\");\n//     } else {\n//       //Nếu không có phiên làm việc của Session User thì mình sẽ xử lý với Redux\n//       const data = {\n//         idProduct: getProduct,\n//         idUser: getUser,\n//         count: getCount,\n//       };\n\n//       //Đưa dữ liệu vào Redux\n//       const action = updateCart(data);\n//       dispatch(action);\n\n//       alertify.set(\"notifier\", \"position\", \"bottom-left\");\n//       alertify.success(\"Bạn Đã Sửa Hàng Thành Công!\");\n\n//       //set state loadRedux để nó load lại hàm useEffect để tiếp tục lấy dữ liệu từ redux\n//       setLoadRedux({\n//         idProduct: getProduct,\n//         count: getCount,\n//       });\n//     }\n//   };\n\n//   //Hàm này dùng để redirect đến page checkout\n//   const [redirect, setRedirect] = useState(false);\n\n//   const onCheckout = () => {\n//     if (!localStorage.getItem(\"id_user\")) {\n//       alertify.set(\"notifier\", \"position\", \"bottom-left\");\n//       alertify.error(\"Vui Lòng Kiểm Tra Lại Đăng Nhập!\");\n//       return;\n//     }\n\n//     if (cart.length === 0) {\n//       alertify.set(\"notifier\", \"position\", \"bottom-left\");\n//       alertify.error(\"Vui Lòng Kiểm Tra Lại Giỏ Hàng!\");\n//       return;\n//     }\n\n//     setRedirect(true);\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <section className=\"py-5 bg-light\">\n//         <div className=\"container\">\n//           <div className=\"row px-4 px-lg-5 py-lg-4 align-items-center\">\n//             <div className=\"col-lg-6\">\n//               <h1 className=\"h2 text-uppercase mb-0\">Cart</h1>\n//             </div>\n//             <div className=\"col-lg-6 text-lg-right\">\n//               <nav aria-label=\"breadcrumb\">\n//                 <ol className=\"breadcrumb justify-content-lg-end mb-0 px-0\">\n//                   <li className=\"breadcrumb-item active\" aria-current=\"page\">\n//                     Cart\n//                   </li>\n//                 </ol>\n//               </nav>\n//             </div>\n//           </div>\n//         </div>\n//       </section>\n//       <section className=\"py-5\">\n//         <h2 className=\"h5 text-uppercase mb-4\">Shopping cart</h2>\n//         <div className=\"row\">\n//           <div className=\"col-lg-8 mb-4 mb-lg-0\">\n//             <ListCart\n//               listCart={cart}\n//               onDeleteCart={onDeleteCart}\n//               onUpdateCount={onUpdateCount}\n//             />\n\n//             <div className=\"bg-light px-4 py-3\">\n//               <div className=\"row align-items-center text-center\">\n//                 <div className=\"col-md-6 mb-3 mb-md-0 text-md-left\">\n//                   <Link\n//                     className=\"btn btn-link p-0 text-dark btn-sm\"\n//                     to={`/shop`}\n//                   >\n//                     <i className=\"fas fa-long-arrow-alt-left mr-2\"> </i>\n//                     Continue shopping\n//                   </Link>\n//                 </div>\n//                 <div className=\"col-md-6 text-md-right\">\n//                   {redirect && <Redirect to={\"/checkout\"} />}\n//                   <span\n//                     className=\"btn btn-outline-dark btn-sm\"\n//                     onClick={onCheckout}\n//                   >\n//                     Proceed to checkout\n//                     <i className=\"fas fa-long-arrow-alt-right ml-2\"></i>\n//                   </span>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"col-lg-4\">\n//             <div className=\"card border-0 rounded-0 p-lg-4 bg-light\">\n//               <div className=\"card-body\">\n//                 <h5 className=\"text-uppercase mb-4\">Cart total</h5>\n//                 <ul className=\"list-unstyled mb-0\">\n//                   <li className=\"d-flex align-items-center justify-content-between\">\n//                     <strong className=\"text-uppercase small font-weight-bold\">\n//                       Subtotal\n//                     </strong>\n//                     <span className=\"text-muted small\">\n//                       {convertMoney(total)} VND\n//                     </span>\n//                   </li>\n//                   <li className=\"border-bottom my-2\"></li>\n//                   <li className=\"d-flex align-items-center justify-content-between mb-4\">\n//                     <strong className=\"text-uppercase small font-weight-bold\">\n//                       Total\n//                     </strong>\n//                     <span>{convertMoney(total)} VND</span>\n//                   </li>\n//                 </ul>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </section>\n//     </div>\n//   );\n// }\n\n// export default Cart;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}