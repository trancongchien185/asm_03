{"ast":null,"code":"// api/axiosClient.js\nimport axios from \"axios\";\nimport queryString from \"query-string\";\n// Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#requestconfig` for the full list of configs\nconst axiosClient = axios.create({\n  baseURL: \"http://localhost:5000\",\n  headers: {\n    \"content-type\": \"application/json\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(async config => {\n  // Handle token here ...\n  // Handle token here ...\n  const token = localStorage.getItem(\"accessToken\");\n  if (token) {\n    config.headers[\"Authorization\"] = \"Bearer \" + token;\n  }\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n  return response;\n}, error => {\n  // Handle errors\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"names":["axios","queryString","axiosClient","create","baseURL","headers","paramsSerializer","params","stringify","interceptors","request","use","config","token","localStorage","getItem","response","data","error"],"sources":["D:/HappyCode/nodejsLab/asm 3/asm_3/client1/src/API/axiosClient.jsx"],"sourcesContent":["// api/axiosClient.js\nimport axios from \"axios\";\nimport queryString from \"query-string\";\n// Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#requestconfig` for the full list of configs\nconst axiosClient = axios.create({\n  baseURL: \"http://localhost:5000\",\n  headers: {\n    \"content-type\": \"application/json\",\n  },\n  paramsSerializer: (params) => queryString.stringify(params),\n});\naxiosClient.interceptors.request.use(async (config) => {\n  // Handle token here ...\n  // Handle token here ...\n  const token = localStorage.getItem(\"accessToken\");\n  if (token) {\n    config.headers[\"Authorization\"] = \"Bearer \" + token;\n  }\n  return config;\n});\naxiosClient.interceptors.response.use(\n  (response) => {\n    if (response && response.data) {\n      return response.data;\n    }\n    return response;\n  },\n  (error) => {\n    // Handle errors\n    throw error;\n  }\n);\nexport default axiosClient;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,cAAc;AACtC;AACA;AACA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC/BC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,gBAAgB,EAAGC,MAAM,IAAKN,WAAW,CAACO,SAAS,CAACD,MAAM;AAC5D,CAAC,CAAC;AACFL,WAAW,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EACrD;EACA;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACjD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACP,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGQ,KAAK;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AACFV,WAAW,CAACO,YAAY,CAACO,QAAQ,CAACL,GAAG,CAClCK,QAAQ,IAAK;EACZ,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE;IAC7B,OAAOD,QAAQ,CAACC,IAAI;EACtB;EACA,OAAOD,QAAQ;AACjB,CAAC,EACAE,KAAK,IAAK;EACT;EACA,MAAMA,KAAK;AACb,CACF,CAAC;AACD,eAAehB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}